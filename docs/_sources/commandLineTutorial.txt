writing your own V2G-Sim scripts
================================

This section will be dissecting a basic project template, and further ideas to solve complex problems.
Note that *launching a simulation by following the basic template won't require of you to be Python expert.* In fact the main reason we have chosen to use Python is for its readability and simplicity.

To launch any script of your own, simply go in the right folder and type:
::
	
	>>> python mybasic_example.py

Note: you might need to use "kivy" instead of "python" if you are a Macintosh user.

The following self explanatory snippet demonstrate how to:
	* Import necessary modules
	* Load vehicles
	* Check their integrity
	* Launch a simulation
	* Plot results 

.. code-block:: python

	from __future__ import division
	import sys, os
	sys.path.append(os.path.join(os.path.dirname(__file__), "path/to/v2g_sim"))  
	import core
	import itinerary.load
	import result.visualization.matp

	# Initialize locations and vehicles from excel file
	excelFilename = 'path/to/your/excel/file'
	vehicleList, locationList = itinerary.load.excel(excelFilename)

	# Supress vehicles that could not be initialized correctly
	vehicleList = itinerary.load.remove_vehicle_with_empty_itinerary(vehicleList)

	# Launch a simulation
	core.runV2GSim(vehicleList, nbIteration=3)

	# Plot the total power demand
	result.visualization.matp.total_EV_power_demand(vehicleList)

Once you have run this example, it's time to go further and experiment with the influence of different parameters.
The graph below introduces certain types of modifications you may want to add on top of the basic template.
Remember that for any given number of vehicles or locations you can change any attribute, this includes the function used to track SOC when driving or charging.

.. image:: V2G-SimPossibility.png


Understand your input data
	With V2G-Sim we made it possible to examine what kind of itineraries is in your input data. 
	To do so:
		* find all the combinations of activities ("home", "work", ...)
		* merge the combination to form bigger group
		* get statistical data on activity duration and distance driven
		* create more vehicles based on statistics 

	.. code-block:: python

		itineraryBinList = itinerary.itineraryBin.find_all_itinerary_combination(vehicleList)
		itineraryBinList =  itinerary.itineraryBin.merge_itinerary_combination(itineraryBinList, ['Home', 'Work'])
		itineraryBinList =  itinerary.itineraryBin.distance_and_duration_per_activity(itineraryBinList)
		vehicleList, locationList = itinerary.create_vehicles.create(itineraryBinList, vehicleNumber)

	You could also decide to remove part of your input data to keep consistent trips. For instance, this function only keeps trips starting and ending at home.

	.. code-block:: python

		itineraryBinList = itinerary.itineraryBin.extract_home_to_home_itinerary(itineraryBinList)

Initialize a grid
	Work in progress.

Update vehicles
	You might want to change the proportion of a specific car model in your data, or modify the initial SOC of some vehicles. The following example shows how you could increase the battery capacity of vehicles that have stranded in the past simulation.

	.. code-block:: python

		for vehicle in vehicleList:
			if vehicle.strandingLog:
				vehicle.carModel.batteryCap += 1000 #(Wh)

	Someone could run simulations until no more vehicles are stranding, and then look at how many people are satisfied by different battery capacity.
	

Update locations
	Locations are linked to a charging station, by changing the power rate and the number of chargers available you can find a right balance between people's need and your grid opportunities. Charging station will often need to be controlled in a intelligent manner so that electrical vehicles benefit the grid. V2G-Sim offers you the possibility to test your own charging strategy. The following example demonstrate how to change maximum power rate and number of available chargers for all work locations.

	.. code-block:: python

		for location in locationList:
			if location.type == "Work":
				location.chargingInfra.availability -= 100 #(number of stations)
				location.chargingInfra.powerRateMax += 1000 #(W)

Solving strategy
	Work in progress, for now the only core algorithm is "core.runV2GSim()" (see core module)

Retrieve results
	The result package contains modules in order to get result at the end of a simulation, it also contains a sub-package "visualization" that will help users plot their results. The visualization package contains 2 modules, one of them help gathering data to plot graph through D3.js, the other is simply using Matplotlib.

	In order to use the module for Matplotlib refer to the API documentation to find the appropriate function.

	If you need an overview of your data and result, you can use the d3.py module. Below is an example to launch it:

	.. code-block:: python

		folder = '/Path/to/V2G-Sim/v2g_sim/result/visualization/web-content'
		result.visualization.d3.visualization(vehicleList, itineraryBinList, folder)